metadata:
  name: "github_devops"
  version: "1.0.0"
  description: "GitHub repository analysis and development operations monitoring (read-only)"
  vendor: "Catalyst MCP"
  license: "MIT"
  compatibility: "GitHub API v4 (GraphQL) and v3 (REST)"
  domain: "devops"
  tags: ["github", "git", "devops", "ci-cd", "repository"]
  pricing_tier: "free"
  required_capabilities: ["api_read"]

connection:
  type: "rest"
  base_url: "https://api.github.com"
  timeout: 30
  verify_ssl: true
  auth:
    method: "bearer"
    config:
      token: "{GITHUB_TOKEN}"

tools:
  list_repositories:
    type: "list"
    description: "List repositories for user or organization"
    endpoint: "/user/repos"
    method: "GET"
    query_params:
      type: "{repo_type}"
      sort: "{sort_by}"
      direction: "{direction}"
      per_page: "{per_page}"
      page: "{page}"
    parameters:
      - name: "repo_type"
        type: "string"
        enum: ["all", "owner", "public", "private", "member"]
        default: "owner"
        description: "Filter repositories by ownership type"
      - name: "sort_by"
        type: "string"
        enum: ["created", "updated", "pushed", "full_name"]
        default: "updated"
        description: "Sort repositories by field"
      - name: "direction"
        type: "string"
        enum: ["asc", "desc"]
        default: "desc"
        description: "Sort direction"
      - name: "per_page"
        type: "integer"
        default: 30
        min_value: 1
        max_value: 100
        description: "Results per page"
      - name: "page"
        type: "integer"
        default: 1
        description: "Page number"
    transform:
      type: "jq"
      expression: '.[] | {name: .name, full_name: .full_name, private: .private, stars: .stargazers_count, forks: .forks_count, language: .language, updated: .updated_at, url: .html_url, description: .description}'

  repository_details:
    type: "details"
    description: "Get detailed information about a specific repository"
    endpoint: "/repos/{owner}/{repo}"
    method: "GET"
    parameters:
      - name: "owner"
        type: "string"
        required: true
        description: "Repository owner (username or organization)"
      - name: "repo"
        type: "string"
        required: true
        description: "Repository name"
    transform:
      type: "jq"
      expression: '{name: .name, full_name: .full_name, description: .description, private: .private, fork: .fork, created_at: .created_at, updated_at: .updated_at, pushed_at: .pushed_at, size: .size, stargazers_count: .stargazers_count, watchers_count: .watchers_count, forks_count: .forks_count, open_issues_count: .open_issues_count, language: .language, default_branch: .default_branch, topics: .topics, license: .license.name, has_issues: .has_issues, has_projects: .has_projects, has_wiki: .has_wiki, archived: .archived, disabled: .disabled}'

  list_issues:
    type: "list"
    description: "List issues for a repository"
    endpoint: "/repos/{owner}/{repo}/issues"
    method: "GET"
    query_params:
      state: "{state}"
      labels: "{labels}"
      sort: "{sort_by}"
      direction: "{direction}"
      since: "{since}"
      per_page: "{per_page}"
      page: "{page}"
    parameters:
      - name: "owner"
        type: "string"
        required: true
        description: "Repository owner"
      - name: "repo"
        type: "string"
        required: true
        description: "Repository name"
      - name: "state"
        type: "string"
        enum: ["open", "closed", "all"]
        default: "open"
        description: "Issue state filter"
      - name: "labels"
        type: "string"
        required: false
        description: "Comma-separated list of label names"
      - name: "sort_by"
        type: "string"
        enum: ["created", "updated", "comments"]
        default: "created"
        description: "Sort issues by field"
      - name: "direction"
        type: "string"
        enum: ["asc", "desc"]
        default: "desc"
        description: "Sort direction"
      - name: "since"
        type: "string"
        required: false
        description: "ISO 8601 timestamp to filter issues updated after"
      - name: "per_page"
        type: "integer"
        default: 30
        min_value: 1
        max_value: 100
        description: "Results per page"
      - name: "page"
        type: "integer"
        default: 1
        description: "Page number"
    transform:
      type: "jq"
      expression: '.[] | {number: .number, title: .title, state: .state, user: .user.login, assignee: (.assignee.login // null), labels: [.labels[].name], created_at: .created_at, updated_at: .updated_at, comments: .comments, url: .html_url, body: (.body // "")[0:200]}'

  list_pull_requests:
    type: "list"
    description: "List pull requests for a repository"
    endpoint: "/repos/{owner}/{repo}/pulls"
    method: "GET"
    query_params:
      state: "{state}"
      head: "{head}"
      base: "{base}"
      sort: "{sort_by}"
      direction: "{direction}"
      per_page: "{per_page}"
      page: "{page}"
    parameters:
      - name: "owner"
        type: "string"
        required: true
        description: "Repository owner"
      - name: "repo"
        type: "string"
        required: true
        description: "Repository name"
      - name: "state"
        type: "string"
        enum: ["open", "closed", "all"]
        default: "open"
        description: "Pull request state filter"
      - name: "head"
        type: "string"
        required: false
        description: "Filter pulls by head user or head organization and branch name"
      - name: "base"
        type: "string"
        required: false
        description: "Filter pulls by base branch name"
      - name: "sort_by"
        type: "string"
        enum: ["created", "updated", "popularity", "long-running"]
        default: "created"
        description: "Sort pull requests by field"
      - name: "direction"
        type: "string"
        enum: ["asc", "desc"]
        default: "desc"
        description: "Sort direction"
      - name: "per_page"
        type: "integer"
        default: 30
        min_value: 1
        max_value: 100
        description: "Results per page"
      - name: "page"
        type: "integer"
        default: 1
        description: "Page number"
    transform:
      type: "jq"
      expression: '.[] | {number: .number, title: .title, state: .state, user: .user.login, assignee: (.assignee.login // null), head_branch: .head.ref, base_branch: .base.ref, created_at: .created_at, updated_at: .updated_at, mergeable: .mergeable, merged: .merged, draft: .draft, url: .html_url, additions: .additions, deletions: .deletions, changed_files: .changed_files}'

  workflow_runs:
    type: "list"
    description: "List GitHub Actions workflow runs"
    endpoint: "/repos/{owner}/{repo}/actions/runs"
    method: "GET"
    query_params:
      status: "{status}"
      conclusion: "{conclusion}"
      branch: "{branch}"
      event: "{event}"
      per_page: "{per_page}"
      page: "{page}"
    parameters:
      - name: "owner"
        type: "string"
        required: true
        description: "Repository owner"
      - name: "repo"
        type: "string"
        required: true
        description: "Repository name"
      - name: "status"
        type: "string"
        enum: ["queued", "in_progress", "completed"]
        required: false
        description: "Filter by run status"
      - name: "conclusion"
        type: "string"
        enum: ["success", "failure", "neutral", "cancelled", "skipped", "timed_out", "action_required"]
        required: false
        description: "Filter by run conclusion"
      - name: "branch"
        type: "string"
        required: false
        description: "Filter by branch name"
      - name: "event"
        type: "string"
        required: false
        description: "Filter by triggering event"
      - name: "per_page"
        type: "integer"
        default: 30
        min_value: 1
        max_value: 100
        description: "Results per page"
      - name: "page"
        type: "integer"
        default: 1
        description: "Page number"
    transform:
      type: "jq"
      expression: '.workflow_runs[] | {id: .id, name: .name, status: .status, conclusion: .conclusion, workflow_id: .workflow_id, branch: .head_branch, event: .event, created_at: .created_at, updated_at: .updated_at, run_number: .run_number, url: .html_url, actor: .actor.login}'

  repository_commits:
    type: "list"
    description: "List commits in a repository"
    endpoint: "/repos/{owner}/{repo}/commits"
    method: "GET"
    query_params:
      sha: "{branch}"
      path: "{path}"
      author: "{author}"
      since: "{since}"
      until: "{until}"
      per_page: "{per_page}"
      page: "{page}"
    parameters:
      - name: "owner"
        type: "string"
        required: true
        description: "Repository owner"
      - name: "repo"
        type: "string"
        required: true
        description: "Repository name"
      - name: "branch"
        type: "string"
        required: false
        description: "Branch name (default: default branch)"
      - name: "path"
        type: "string"
        required: false
        description: "Filter commits touching this file path"
      - name: "author"
        type: "string"
        required: false
        description: "GitHub login or email address"
      - name: "since"
        type: "string"
        required: false
        description: "ISO 8601 timestamp"
      - name: "until"
        type: "string"
        required: false
        description: "ISO 8601 timestamp"
      - name: "per_page"
        type: "integer"
        default: 30
        min_value: 1
        max_value: 100
        description: "Results per page"
      - name: "page"
        type: "integer"
        default: 1
        description: "Page number"
    transform:
      type: "jq"
      expression: '.[] | {sha: .sha[0:7], message: .commit.message | split("\n")[0], author: .commit.author.name, author_email: .commit.author.email, date: .commit.author.date, url: .html_url, stats: {additions: .stats.additions, deletions: .stats.deletions, total: .stats.total}}'

  repository_contributors:
    type: "list"
    description: "List repository contributors"
    endpoint: "/repos/{owner}/{repo}/contributors"
    method: "GET"
    query_params:
      anon: "true"
      per_page: "{per_page}"
      page: "{page}"
    parameters:
      - name: "owner"
        type: "string"
        required: true
        description: "Repository owner"
      - name: "repo"
        type: "string"
        required: true
        description: "Repository name"
      - name: "per_page"
        type: "integer"
        default: 30
        min_value: 1
        max_value: 100
        description: "Results per page"
      - name: "page"
        type: "integer"
        default: 1
        description: "Page number"
    transform:
      type: "jq"
      expression: '.[] | {login: .login, contributions: .contributions, url: .html_url, avatar: .avatar_url, type: .type}'

  repository_releases:
    type: "list"
    description: "List repository releases"
    endpoint: "/repos/{owner}/{repo}/releases"
    method: "GET"
    query_params:
      per_page: "{per_page}"
      page: "{page}"
    parameters:
      - name: "owner"
        type: "string"
        required: true
        description: "Repository owner"
      - name: "repo"
        type: "string"
        required: true
        description: "Repository name"
      - name: "per_page"
        type: "integer"
        default: 30
        min_value: 1
        max_value: 100
        description: "Results per page"
      - name: "page"
        type: "integer"
        default: 1
        description: "Page number"
    transform:
      type: "jq"
      expression: '.[] | {tag_name: .tag_name, name: .name, draft: .draft, prerelease: .prerelease, created_at: .created_at, published_at: .published_at, author: .author.login, url: .html_url, assets_count: (.assets | length), body: (.body // "")[0:500]}'

  organization_repositories:
    type: "list"
    description: "List repositories for an organization"
    endpoint: "/orgs/{org}/repos"
    method: "GET"
    query_params:
      type: "{repo_type}"
      sort: "{sort_by}"
      direction: "{direction}"
      per_page: "{per_page}"
      page: "{page}"
    parameters:
      - name: "org"
        type: "string"
        required: true
        description: "Organization name"
      - name: "repo_type"
        type: "string"
        enum: ["all", "public", "private", "forks", "sources", "member"]
        default: "all"
        description: "Repository type filter"
      - name: "sort_by"
        type: "string"
        enum: ["created", "updated", "pushed", "full_name"]
        default: "updated"
        description: "Sort repositories by field"
      - name: "direction"
        type: "string"
        enum: ["asc", "desc"]
        default: "desc"
        description: "Sort direction"
      - name: "per_page"
        type: "integer"
        default: 30
        min_value: 1
        max_value: 100
        description: "Results per page"
      - name: "page"
        type: "integer"
        default: 1
        description: "Page number"
    transform:
      type: "jq"
      expression: '.[] | {name: .name, full_name: .full_name, private: .private, stars: .stargazers_count, forks: .forks_count, language: .language, updated: .updated_at, url: .html_url, description: .description, archived: .archived}'

  check_runs:
    type: "list"
    description: "List check runs for a Git reference"
    endpoint: "/repos/{owner}/{repo}/commits/{ref}/check-runs"
    method: "GET"
    query_params:
      check_name: "{check_name}"
      status: "{status}"
      filter: "{filter}"
      per_page: "{per_page}"
      page: "{page}"
    parameters:
      - name: "owner"
        type: "string"
        required: true
        description: "Repository owner"
      - name: "repo"
        type: "string"
        required: true
        description: "Repository name"
      - name: "ref"
        type: "string"
        required: true
        description: "Git reference (branch, tag, or commit SHA)"
      - name: "check_name"
        type: "string"
        required: false
        description: "Filter by check name"
      - name: "status"
        type: "string"
        enum: ["queued", "in_progress", "completed"]
        required: false
        description: "Filter by status"
      - name: "filter"
        type: "string"
        enum: ["latest", "all"]
        default: "latest"
        description: "Filter which check runs to return"
      - name: "per_page"
        type: "integer"
        default: 30
        min_value: 1
        max_value: 100
        description: "Results per page"
      - name: "page"
        type: "integer"
        default: 1
        description: "Page number"
    transform:
      type: "jq"
      expression: '.check_runs[] | {id: .id, name: .name, status: .status, conclusion: .conclusion, started_at: .started_at, completed_at: .completed_at, url: .html_url, app: .app.name}'

prompts:
  repository_analysis:
    description: "Comprehensive repository analysis and health check"
    template: |
      Perform a comprehensive analysis of the GitHub repository:
      
      ## Repository Overview
      1. Get basic repository information: repository_details
      2. Analyze repository activity: repository_commits (last 30 days)
      3. Check contributor activity: repository_contributors
      
      ## Development Activity
      4. Review open issues: list_issues (state=open)
      5. Check pull request status: list_pull_requests (state=open)
      6. Examine recent releases: repository_releases
      
      ## CI/CD Health
      7. Check workflow runs: workflow_runs (last 50 runs)
      8. Analyze build success rate and failure patterns
      9. Review check runs for latest commits: check_runs
      
      Focus on identifying:
      - Code quality trends and patterns
      - Development velocity and bottlenecks
      - CI/CD pipeline health and reliability
      - Community engagement and maintenance status
      - Security and compliance considerations
      
      Provide actionable insights for:
      - Repository health and maintenance
      - Development workflow optimization
      - Team productivity improvement
      - Risk assessment and mitigation
    suggested_tools: ["repository_details", "repository_commits", "list_issues", "list_pull_requests", "workflow_runs"]

  team_productivity:
    description: "Analyze team productivity and development patterns"
    template: |
      Analyze team productivity across repositories:
      
      ## Team Activity Analysis
      1. Review contributor patterns: repository_contributors
      2. Analyze commit frequency and patterns: repository_commits
      3. Examine pull request workflows: list_pull_requests
      4. Check issue resolution rates: list_issues
      
      ## Development Velocity
      5. Track release frequency: repository_releases
      6. Monitor CI/CD performance: workflow_runs
      7. Assess code review efficiency via PR metrics
      8. Identify development bottlenecks
      
      ## Quality Metrics
      9. Review test automation coverage through workflow runs
      10. Analyze build failure patterns and causes
      11. Check security scan results in actions
      12. Monitor dependency update patterns
      
      Focus on metrics:
      - Commit frequency and distribution
      - Pull request cycle time
      - Issue resolution time
      - Build success rates
      - Code review participation
      
      Provide insights for:
      - Team collaboration improvement
      - Workflow optimization
      - Productivity bottleneck identification
      - Quality assurance enhancement
      - Resource allocation optimization
    suggested_tools: ["repository_contributors", "repository_commits", "list_pull_requests", "workflow_runs"]

resources:
  github_api_docs:
    type: "documentation"
    url: "https://docs.github.com/en/rest"
    description: "GitHub REST API official documentation"

  github_webhooks:
    type: "guide"
    url: "https://docs.github.com/en/developers/webhooks-and-events/webhooks"
    description: "GitHub webhooks for real-time integration"

  github_actions_docs:
    type: "guide"
    url: "https://docs.github.com/en/actions"
    description: "GitHub Actions CI/CD documentation"

  best_practices:
    type: "guide"
    url: "https://github.com/github/platform-samples"
    description: "GitHub platform integration best practices"

error_mapping:
  "401": "Authentication failed - check GitHub token permissions"
  "403": "Rate limit exceeded or insufficient permissions"
  "404": "Repository, organization, or resource not found"
  "422": "Validation failed - check parameter values"