metadata:
  name: "rabbitmq_messaging"
  version: "1.0.0"
  description: "RabbitMQ message queue monitoring and analysis tools (read-only)"
  vendor: "Catalyst MCP"
  license: "MIT"
  compatibility: "RabbitMQ 3.8+"
  domain: "messaging"
  tags: ["rabbitmq", "messaging", "queue", "pub-sub"]
  pricing_tier: "free"
  required_capabilities: ["message_read"]

connection:
  type: "message_queue"
  engine: "rabbitmq"
  host: "{RABBITMQ_HOST}"
  port: "{RABBITMQ_PORT:-5672}"
  timeout: 30
  auth:
    method: "basic"
    config:
      username: "{RABBITMQ_USER:-guest}"
      password: "{RABBITMQ_PASSWORD:-guest}"

tools:
  list_queues:
    type: "list"
    description: "List all queues in RabbitMQ"
    config:
      operation: "list_queues"
    parameters: []

  peek_messages:
    type: "details"
    description: "Peek at messages in a RabbitMQ queue without consuming"
    queue: "{queue_name}"
    config:
      operation: "peek"
    parameters:
      - name: "queue_name"
        type: "string"
        required: true
        description: "Queue to peek at messages from"
      - name: "max_messages"
        type: "integer"
        default: 10
        min_value: 1
        max_value: 100
        description: "Maximum number of messages to peek at"

  queue_details:
    type: "details"
    description: "Get detailed information about a specific queue"
    queue: "{queue_name}"
    config:
      operation: "queue_info"
    parameters:
      - name: "queue_name"
        type: "string"
        required: true
        description: "Name of the queue to inspect"

  list_exchanges:
    type: "list"
    description: "List all exchanges in RabbitMQ"
    config:
      operation: "list_exchanges"
    parameters: []

  connection_status:
    type: "details"
    description: "Get RabbitMQ connection and cluster status"
    config:
      operation: "status"
    parameters: []

prompts:
  event_driven_architecture:
    description: "Set up event-driven messaging patterns"
    template: |
      Help set up event-driven architecture using RabbitMQ:
      
      1. First, create necessary queues and exchanges:
         - Use create_queue for setting up persistent queues
         - Consider queue durability and auto-delete settings
      
      2. Publish structured events:
         - Use publish_event for standardized event publishing
         - Include correlation IDs for request tracing
         - Follow event naming conventions
      
      3. Set up message consumers:
         - Use consume_messages to process events
         - Handle message acknowledgment properly
         - Implement error handling and retry logic
      
      Event types available:
      - user.created, user.updated, user.deleted
      - order.placed, order.cancelled
      
      Best practices:
      - Use durable queues for critical events
      - Include timestamps in event payloads
      - Design for idempotent message processing
    suggested_tools: ["create_queue", "publish_event", "consume_messages"]

  message_monitoring:
    description: "Monitor message queue health and performance"
    template: |
      Monitor RabbitMQ message queues and performance:
      
      Available monitoring capabilities:
      - Consume messages to check queue status
      - Publish test messages to verify connectivity
      - Monitor message throughput and latency
      
      For queue health monitoring:
      1. Check message backlog using consume_messages
      2. Verify message publishing works with publish_message
      3. Monitor for dead letter queues
      
      For performance testing:
      1. Use bulk_publish for load testing
      2. Measure message processing rates
      3. Monitor memory and connection usage
      
      Alert on:
      - Growing message backlogs
      - Failed message deliveries
      - Connection failures
      - High memory usage
    suggested_tools: ["consume_messages", "publish_message", "bulk_publish"]

resources:
  rabbitmq_docs:
    type: "documentation"
    url: "https://www.rabbitmq.com/documentation.html"
    description: "Official RabbitMQ documentation"

  amqp_tutorial:
    type: "tutorial"
    url: "https://www.rabbitmq.com/getstarted.html"
    description: "RabbitMQ getting started tutorials"

  clustering_guide:
    type: "guide"
    url: "https://www.rabbitmq.com/clustering.html"
    description: "RabbitMQ clustering and high availability"

  monitoring_guide:
    type: "guide"
    url: "https://www.rabbitmq.com/monitoring.html"
    description: "RabbitMQ monitoring and observability"

error_mapping:
  "connection refused": "Unable to connect to RabbitMQ server - check host, port, and credentials"
  "access refused": "Authentication failed - check username and password"
  "not found": "The specified queue or exchange does not exist"
  "precondition failed": "Queue or exchange configuration conflicts with existing definition"
  "channel closed": "RabbitMQ channel was closed due to an error"