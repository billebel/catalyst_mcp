metadata:
  name: "linux_server_admin"
  version: "1.0.0"
  description: "Linux server monitoring and system analysis tools via SSH (read-only)"
  vendor: "Catalyst MCP"
  license: "MIT"
  compatibility: "Linux, Ubuntu, CentOS, RHEL"
  domain: "infrastructure"
  tags: ["linux", "ssh", "server", "admin", "monitoring"]
  pricing_tier: "free"
  required_capabilities: ["system_read"]

connection:
  type: "ssh"
  engine: "ssh"
  hostname: "{SSH_HOST}"
  port: "{SSH_PORT:-22}"
  username: "{SSH_USER}"
  timeout: 30
  auth:
    method: "ssh_key"
    config:
      private_key_file: "{SSH_PRIVATE_KEY_FILE}"
      passphrase: "{SSH_KEY_PASSPHRASE}"

tools:
  system_info:
    type: "command"
    description: "Get comprehensive system information"
    command: |
      echo "=== System Information ===" &&
      uname -a &&
      echo -e "\n=== OS Release ===" &&
      cat /etc/os-release 2>/dev/null || cat /etc/redhat-release 2>/dev/null &&
      echo -e "\n=== Uptime ===" &&
      uptime &&
      echo -e "\n=== CPU Info ===" &&
      lscpu | head -20 &&
      echo -e "\n=== Memory ===" &&
      free -h &&
      echo -e "\n=== Disk Space ===" &&
      df -h
    parameters: []

  process_monitor:
    type: "command"
    description: "Monitor running processes and resource usage"
    command: "ps aux --sort=-%cpu | head -{count}"
    parameters:
      - name: "count"
        type: "integer"
        default: 20
        min_value: 5
        max_value: 100
        description: "Number of top processes to show"

  check_services:
    type: "command"
    description: "Check status of system services"
    command: "systemctl status {service_names} --no-pager"
    parameters:
      - name: "service_names"
        type: "string"
        required: true
        description: "Space-separated list of service names to check"

  disk_usage:
    type: "command"
    description: "Analyze disk usage by directory"
    command: "du -sh {directory}/* 2>/dev/null | sort -hr | head -{count}"
    working_directory: "/"
    parameters:
      - name: "directory"
        type: "string"
        default: "/var"
        description: "Directory to analyze"
      - name: "count"
        type: "integer"
        default: 10
        min_value: 5
        max_value: 50
        description: "Number of largest directories to show"

  log_analysis:
    type: "command"
    description: "Analyze system logs for errors and patterns"
    command: |
      echo "=== Recent System Errors ===" &&
      journalctl --priority=err --since="{since}" --no-pager | tail -{lines} &&
      echo -e "\n=== Authentication Logs ===" &&
      grep -i "authentication failure\|failed password" /var/log/auth.log 2>/dev/null | tail -10 || echo "Auth log not accessible"
    parameters:
      - name: "since"
        type: "string"
        default: "1 hour ago"
        description: "Time period to analyze (e.g., '1 hour ago', '2 days ago')"
      - name: "lines"
        type: "integer"
        default: 20
        min_value: 5
        max_value: 100
        description: "Number of log lines to show"

  network_status:
    type: "command"
    description: "Check network connectivity and open ports"
    command: |
      echo "=== Network Interfaces ===" &&
      ip addr show &&
      echo -e "\n=== Active Connections ===" &&
      ss -tuln | head -20 &&
      echo -e "\n=== Default Route ===" &&
      ip route | grep default
    parameters: []

  package_info:
    type: "command"
    description: "Get information about installed packages"
    command: |
      if command -v apt-get >/dev/null 2>&1; then
        apt list --installed | grep {package_pattern} | head -20
      elif command -v yum >/dev/null 2>&1; then
        yum list installed | grep {package_pattern} | head -20
      elif command -v dnf >/dev/null 2>&1; then
        dnf list installed | grep {package_pattern} | head -20
      else
        echo "No supported package manager found"
        exit 1
      fi
    parameters:
      - name: "package_pattern"
        type: "string"
        required: false
        default: ".*"
        description: "Pattern to search for in package names"

  system_updates_available:
    type: "command"
    description: "Check for available system updates (read-only)"
    command: |
      if command -v apt-get >/dev/null 2>&1; then
        apt list --upgradable 2>/dev/null | head -20
      elif command -v yum >/dev/null 2>&1; then
        yum check-update | head -20
      elif command -v dnf >/dev/null 2>&1; then
        dnf check-update | head -20
      else
        echo "No supported package manager found"
        exit 1
      fi
    parameters: []

  view_config_files:
    type: "command"
    description: "View system configuration files (read-only)"
    command: |
      echo "=== Configuration File: {config_file} ==="
      if [ -f "{config_file}" ]; then
        head -{lines} "{config_file}"
      else
        echo "File not found or not accessible"
      fi
    parameters:
      - name: "config_file"
        type: "string"
        required: true
        description: "Path to configuration file to view"
      - name: "lines"
        type: "integer"
        default: 50
        min_value: 10
        max_value: 200
        description: "Number of lines to display"

  security_scan:
    type: "command"
    description: "Basic security scan and hardening check"
    command: |
      echo "=== Failed Login Attempts ===" &&
      grep "Failed password" /var/log/auth.log 2>/dev/null | tail -10 || echo "No auth log access" &&
      echo -e "\n=== Open Ports ===" &&
      ss -tuln | grep LISTEN &&
      echo -e "\n=== Sudo Users ===" &&
      getent group sudo 2>/dev/null || getent group wheel 2>/dev/null &&
      echo -e "\n=== SSH Configuration ===" &&
      grep -E "^(PermitRootLogin|PasswordAuthentication|Port)" /etc/ssh/sshd_config 2>/dev/null || echo "SSH config not accessible" &&
      echo -e "\n=== Firewall Status ===" &&
      (ufw status 2>/dev/null || firewall-cmd --state 2>/dev/null || iptables -L -n | head -10) 2>/dev/null || echo "Firewall status unavailable"
    parameters: []

  file_search:
    type: "command"
    description: "Search for files by name or content"
    command: |
      if [ "{search_type}" = "name" ]; then
        find {search_path} -type f -name "*{query}*" 2>/dev/null | head -{max_results}
      elif [ "{search_type}" = "content" ]; then
        grep -r "{query}" {search_path} 2>/dev/null | head -{max_results}
      else
        echo "Invalid search type. Use 'name' or 'content'"
        exit 1
      fi
    parameters:
      - name: "query"
        type: "string"
        required: true
        description: "Search query (filename pattern or text content)"
      - name: "search_path"
        type: "string"
        default: "/var/log"
        description: "Path to search in"
      - name: "search_type"
        type: "string"
        enum: ["name", "content"]
        required: true
        description: "Type of search to perform"
      - name: "max_results"
        type: "integer"
        default: 50
        min_value: 1
        max_value: 200
        description: "Maximum number of results to return"

prompts:
  server_health_check:
    description: "Comprehensive server health monitoring"
    template: |
      Perform a comprehensive health check of the Linux server:
      
      1. System Overview:
         - Get basic system information: system_info
         - Check running processes: process_monitor
         - Analyze disk usage: disk_usage
      
      2. Service Monitoring:
         - Check critical services status: check_services
         - Monitor network connectivity: network_status
      
      3. Log Analysis:
         - Review recent errors: log_analysis
         - Look for security issues in logs
      
      4. Resource Monitoring:
         - Check CPU, memory, and disk usage
         - Identify resource-intensive processes
         - Monitor network connections
      
      Focus on:
      - System performance bottlenecks
      - Service availability
      - Security concerns
      - Capacity planning needs
      
      Provide recommendations for:
      - Performance optimization
      - Security hardening
      - Preventive maintenance
    suggested_tools: ["system_info", "process_monitor", "disk_usage", "check_services", "log_analysis", "network_status"]

  incident_response:
    description: "Server incident investigation and response"
    template: |
      Investigate and respond to server incidents:
      
      For performance issues:
      1. Check system resources: system_info, process_monitor
      2. Analyze disk space: disk_usage
      3. Review system logs: log_analysis
      4. Check network connectivity: network_status
      
      For security incidents:
      1. Run security scan: security_scan
      2. Check authentication logs: log_analysis
      3. Review active connections: network_status
      4. Search for suspicious files: file_search
      
      For service outages:
      1. Check service status: check_services
      2. Review service logs: log_analysis
      3. Verify dependencies and resources
      4. Restart services if necessary
      
      Documentation and recovery:
      - Backup configurations before changes: backup_config
      - Document findings and actions taken
      - Plan preventive measures
      - Schedule follow-up monitoring
      
      Emergency actions:
      - System updates: update_system
      - Package installation: install_package
      - Configuration backups: backup_config
    suggested_tools: ["security_scan", "log_analysis", "check_services", "backup_config"]

resources:
  linux_admin_guide:
    type: "documentation"
    url: "https://tldp.org/LDP/sag/html/"
    description: "Linux System Administrator's Guide"

  security_hardening:
    type: "guide"
    url: "https://www.cisecurity.org/cis-benchmarks/"
    description: "CIS Linux security benchmarks"

  monitoring_tools:
    type: "guide"
    url: "https://www.linux.com/training-tutorials/linux-system-monitoring-tools/"
    description: "Linux system monitoring tools and techniques"

  troubleshooting:
    type: "guide"
    url: "https://www.redhat.com/sysadmin/"
    description: "Red Hat system administration and troubleshooting"

error_mapping:
  "Permission denied": "Insufficient privileges - may need sudo or different user"
  "No such file or directory": "Command or file path not found on the system"
  "Connection refused": "SSH connection failed - check host, port, and firewall"
  "Host key verification failed": "SSH host key mismatch - verify server identity"
  "Authentication failed": "SSH authentication failed - check credentials and key files"
  "sudo: command not found": "sudo is not installed or not in PATH"